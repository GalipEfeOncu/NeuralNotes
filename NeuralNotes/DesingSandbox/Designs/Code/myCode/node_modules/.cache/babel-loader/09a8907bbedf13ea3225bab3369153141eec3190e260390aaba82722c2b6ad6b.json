{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\neuralnotes\\\\src\\\\contexts\\\\AIContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Mock AI responses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockResponses = {\n  'summarize': 'Here\\'s a summary of your note: This note contains key information about your project timeline, important deadlines, and team responsibilities.',\n  'ideas': 'Based on your note, here are some ideas:\\n1. Consider breaking down the larger tasks into smaller, manageable chunks\\n2. Set specific milestones with deadlines\\n3. Create a visual representation of your progress',\n  'expand': 'I can help expand on your note. Here are some additional points to consider:\\n- Include specific metrics for success\\n- Add contact information for key stakeholders\\n- Consider potential risks and mitigation strategies',\n  'default': 'I\\'m your NeuralNotes AI assistant. How can I help with your notes today? I can summarize content, suggest ideas, help with formatting, or answer questions.'\n};\n\n// Function to generate mock AI responses\nconst generateMockResponse = query => {\n  const lowerQuery = query.toLowerCase();\n  if (lowerQuery.includes('summarize') || lowerQuery.includes('summary')) {\n    return mockResponses.summarize;\n  } else if (lowerQuery.includes('idea') || lowerQuery.includes('suggest')) {\n    return mockResponses.ideas;\n  } else if (lowerQuery.includes('expand') || lowerQuery.includes('more')) {\n    return mockResponses.expand;\n  } else {\n    return mockResponses.default;\n  }\n};\nconst AIContext = /*#__PURE__*/createContext();\nexport const useAI = () => {\n  _s();\n  return useContext(AIContext);\n};\n_s(useAI, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AIProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAIOpen, setIsAIOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    id: 1,\n    sender: 'ai',\n    text: 'Hello! I\\'m your NeuralNotes AI assistant. How can I help with your notes today?'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const toggleAI = () => {\n    setIsAIOpen(!isAIOpen);\n  };\n  const sendMessage = text => {\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      text\n    };\n    setMessages([...messages, userMessage]);\n\n    // Simulate AI thinking\n    setIsLoading(true);\n\n    // Simulate AI response after a short delay\n    setTimeout(() => {\n      const aiResponse = {\n        id: Date.now() + 1,\n        sender: 'ai',\n        text: generateMockResponse(text)\n      };\n      setMessages(prev => [...prev, aiResponse]);\n      setIsLoading(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(AIContext.Provider, {\n    value: {\n      isAIOpen,\n      toggleAI,\n      messages,\n      sendMessage,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s2(AIProvider, \"YsYS0c0UaayXQ1YNxYEkBVvxzZ8=\");\n_c = AIProvider;\nvar _c;\n$RefreshReg$(_c, \"AIProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","mockResponses","generateMockResponse","query","lowerQuery","toLowerCase","includes","summarize","ideas","expand","default","AIContext","useAI","_s","AIProvider","children","_s2","isAIOpen","setIsAIOpen","messages","setMessages","id","sender","text","isLoading","setIsLoading","toggleAI","sendMessage","userMessage","Date","now","setTimeout","aiResponse","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/projects/neuralnotes/src/contexts/AIContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Mock AI responses\nconst mockResponses = {\n  'summarize': 'Here\\'s a summary of your note: This note contains key information about your project timeline, important deadlines, and team responsibilities.',\n  'ideas': 'Based on your note, here are some ideas:\\n1. Consider breaking down the larger tasks into smaller, manageable chunks\\n2. Set specific milestones with deadlines\\n3. Create a visual representation of your progress',\n  'expand': 'I can help expand on your note. Here are some additional points to consider:\\n- Include specific metrics for success\\n- Add contact information for key stakeholders\\n- Consider potential risks and mitigation strategies',\n  'default': 'I\\'m your NeuralNotes AI assistant. How can I help with your notes today? I can summarize content, suggest ideas, help with formatting, or answer questions.'\n};\n\n// Function to generate mock AI responses\nconst generateMockResponse = (query) => {\n  const lowerQuery = query.toLowerCase();\n  \n  if (lowerQuery.includes('summarize') || lowerQuery.includes('summary')) {\n    return mockResponses.summarize;\n  } else if (lowerQuery.includes('idea') || lowerQuery.includes('suggest')) {\n    return mockResponses.ideas;\n  } else if (lowerQuery.includes('expand') || lowerQuery.includes('more')) {\n    return mockResponses.expand;\n  } else {\n    return mockResponses.default;\n  }\n};\n\nconst AIContext = createContext();\n\nexport const useAI = () => useContext(AIContext);\n\nexport const AIProvider = ({ children }) => {\n  const [isAIOpen, setIsAIOpen] = useState(false);\n  const [messages, setMessages] = useState([\n    { id: 1, sender: 'ai', text: 'Hello! I\\'m your NeuralNotes AI assistant. How can I help with your notes today?' }\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleAI = () => {\n    setIsAIOpen(!isAIOpen);\n  };\n\n  const sendMessage = (text) => {\n    // Add user message\n    const userMessage = { id: Date.now(), sender: 'user', text };\n    setMessages([...messages, userMessage]);\n    \n    // Simulate AI thinking\n    setIsLoading(true);\n    \n    // Simulate AI response after a short delay\n    setTimeout(() => {\n      const aiResponse = { \n        id: Date.now() + 1, \n        sender: 'ai', \n        text: generateMockResponse(text) \n      };\n      setMessages(prev => [...prev, aiResponse]);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <AIContext.Provider value={{ \n      isAIOpen, \n      toggleAI, \n      messages, \n      sendMessage,\n      isLoading \n    }}>\n      {children}\n    </AIContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}